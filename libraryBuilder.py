import json
from binascii import b2a_hex
from creatContract import abi_bytecode
from conbinPatch import combine_bytecode, addition_to_source, Addition
from web3 import Web3

impl_abi = json.loads('[{"inputs":[{"internalType":"uint256","name":"y","type":"uint256"}],"name":"sqrt","outputs":[{"internalType":"uint256","name":"z","type":"uint256"}],"stateMutability":"pure","type":"function"}]')
impl_bytecode = '608060405234801561001057600080fd5b50610287806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063677342ce14610030575b600080fd5b61004a600480360381019061004591906100ef565b610060565b604051610057919061012b565b60405180910390f35b600060038211156100c7578190506000600160028461007f919061019c565b6100899190610146565b90505b818110156100c15780915060028182856100a6919061019c565b6100b09190610146565b6100ba919061019c565b905061008c565b506100d5565b600082146100d457600190505b5b919050565b6000813590506100e98161023a565b92915050565b60006020828403121561010557610104610235565b5b6000610113848285016100da565b91505092915050565b610125816101cd565b82525050565b6000602082019050610140600083018461011c565b92915050565b6000610151826101cd565b915061015c836101cd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610191576101906101d7565b5b828201905092915050565b60006101a7826101cd565b91506101b2836101cd565b9250826101c2576101c1610206565b5b828204905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610243816101cd565b811461024e57600080fd5b5056fea2646970667358221220c4a70040629ba3cbcca348e11ad84d0b7193058a89b6683a7a9eba3da18dcc3664736f6c63430008070033'
proxy_abi = json.loads('[{"inputs":[{"internalType":"address","name":"impl","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"input_data","type":"bytes"}],"name":"exec","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implLibrary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImpl","type":"address"}],"name":"updateImpl","outputs":[],"stateMutability":"nonpayable","type":"function"}]')
proxy_bytecode = '608060405234801561001057600080fd5b506040516106813803806106818339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b61056a806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806355f8650114610046578063c8eec29314610077578063fcf1e00914610095575b600080fd5b610060600480360381019061005b9190610268565b6100b1565b60405161006e92919061036b565b60405180910390f35b61007f61014f565b60405161008c9190610350565b60405180910390f35b6100af60048036038101906100aa919061023b565b610173565b005b6000606060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856040516100fd9190610339565b600060405180830381855af49150503d8060008114610138576040519150601f19603f3d011682016040523d82523d6000602084013e61013d565b606091505b50915091508181935093505050915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006101c96101c4846103c0565b61039b565b9050828152602081018484840111156101e5576101e46104fd565b5b6101f0848285610456565b509392505050565b6000813590506102078161051d565b92915050565b600082601f830112610222576102216104f8565b5b81356102328482602086016101b6565b91505092915050565b60006020828403121561025157610250610507565b5b600061025f848285016101f8565b91505092915050565b60006020828403121561027e5761027d610507565b5b600082013567ffffffffffffffff81111561029c5761029b610502565b5b6102a88482850161020d565b91505092915050565b6102ba81610418565b82525050565b6102c98161042a565b82525050565b60006102da826103f1565b6102e481856103fc565b93506102f4818560208601610465565b6102fd8161050c565b840191505092915050565b6000610313826103f1565b61031d818561040d565b935061032d818560208601610465565b80840191505092915050565b60006103458284610308565b915081905092915050565b600060208201905061036560008301846102b1565b92915050565b600060408201905061038060008301856102c0565b818103602083015261039281846102cf565b90509392505050565b60006103a56103b6565b90506103b18282610498565b919050565b6000604051905090565b600067ffffffffffffffff8211156103db576103da6104c9565b5b6103e48261050c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061042382610436565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610483578082015181840152602081019050610468565b83811115610492576000848401525b50505050565b6104a18261050c565b810181811067ffffffffffffffff821117156104c0576104bf6104c9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61052681610418565b811461053157600080fd5b5056fea2646970667358221220c326919a3f2f889040dff931107c73e8139bd313cdfa7ff26889e4b0f151da6164736f6c63430008070033'

ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))
web3.eth.defaultAccount = web3.eth.accounts[0]

class DISTLibrary:

    impl = None
    proxy = None
    source = None

    def __init__(self):
        # 部署实现合约
        impl_contract = web3.eth.contract(abi=impl_abi, bytecode=impl_bytecode)
        tx_hash = impl_contract.constructor().transact()
        impl_addr = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # 部署代理合约
        proxy_contract = web3.eth.contract(abi=proxy_abi, bytecode=proxy_bytecode)
        tx_hash = proxy_contract.constructor(impl_addr).transact()
        proxy_addr = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # 赋值
        self.impl = web3.eth.contract(address=impl_addr, abi=impl_abi)
        self.proxy = web3.eth.contract(address=proxy_addr, abi=proxy_abi)
        self.source = addition_to_source(Addition(impl_bytecode))

    def append(self, abi: list, bytecode: str):
        addition = Addition(bytecode)
        new_source = combine_bytecode(self.source, addition)
        new_abi = self.impl.abi + abi
        # 将合并后的合约部署
        new_impl = web3.eth.contract(abi=new_abi, bytecode=new_source.bytecode)
        tx_hash = new_impl.constructor().transact()
        new_impl_addr = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # 更改代理合约中的实现合约地址
        self.proxy.functions.updateImpl(new_impl_addr).transact()
        # 更新变量
        self.impl = web3.eth.contract(address=new_impl_addr, abi=new_abi)
        self.source = new_source

    def call_fun(self, _fn_name: str, _args: list):
        data = self.impl.encodeABI(fn_name=_fn_name, args=_args)
        return_data = self.proxy.functions.exec(data).call()
        return return_data[0], b2a_hex(return_data[1]).decode()


if __name__ == '__main__':
    lib = DISTLibrary()
    lib.append(abi_bytecode[0][0], abi_bytecode[0][1])
    state1, data1 = lib.call_fun('sqrt', [5])
    state2, data2 = lib.call_fun('add1', [6])
    print(state1, data1)
    print(state2, data2)
