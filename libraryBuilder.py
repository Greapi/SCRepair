import json
from conbinPatch import combine_bytecode, Addition
from web3 import Web3

proxy_abi = json.loads('[{"inputs":[{"internalType":"address","name":"impl","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"funsig","type":"bytes"}],"name":"exec","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implLibrary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImpl","type":"address"}],"name":"updateImpl","outputs":[],"stateMutability":"nonpayable","type":"function"}]')
proxy_bytecode = '608060405234801561001057600080fd5b50604051610681380380610681833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61056a806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806355f8650114610046578063c8eec29314610077578063fcf1e00914610095575b600080fd5b610060600480360381019061005b9190610310565b6100b1565b60405161006e9291906103fc565b60405180910390f35b61007f61014f565b60405161008c919061046d565b60405180910390f35b6100af60048036038101906100aa91906104b4565b610173565b005b6000606060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856040516100fd919061051d565b600060405180830381855af49150503d8060008114610138576040519150601f19603f3d011682016040523d82523d6000602084013e61013d565b606091505b50915091508181935093505050915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61021d826101d4565b810181811067ffffffffffffffff8211171561023c5761023b6101e5565b5b80604052505050565b600061024f6101b6565b905061025b8282610214565b919050565b600067ffffffffffffffff82111561027b5761027a6101e5565b5b610284826101d4565b9050602081019050919050565b82818337600083830152505050565b60006102b36102ae84610260565b610245565b9050828152602081018484840111156102cf576102ce6101cf565b5b6102da848285610291565b509392505050565b600082601f8301126102f7576102f66101ca565b5b81356103078482602086016102a0565b91505092915050565b600060208284031215610326576103256101c0565b5b600082013567ffffffffffffffff811115610344576103436101c5565b5b610350848285016102e2565b91505092915050565b60008115159050919050565b61036e81610359565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103ae578082015181840152602081019050610393565b838111156103bd576000848401525b50505050565b60006103ce82610374565b6103d8818561037f565b93506103e8818560208601610390565b6103f1816101d4565b840191505092915050565b60006040820190506104116000830185610365565b818103602083015261042381846103c3565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104578261042c565b9050919050565b6104678161044c565b82525050565b6000602082019050610482600083018461045e565b92915050565b6104918161044c565b811461049c57600080fd5b50565b6000813590506104ae81610488565b92915050565b6000602082840312156104ca576104c96101c0565b5b60006104d88482850161049f565b91505092915050565b600081905092915050565b60006104f782610374565b61050181856104e1565b9350610511818560208601610390565b80840191505092915050565b600061052982846104ec565b91508190509291505056fea26469706673582212207c9066fd65e5afbe106e7c6ff78fa35b35c39c156a4acc834b1a05ae0a0f412064736f6c634300080b0033'
impl_abi = json.loads('[{"inputs":[],"name":"hello","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"}]')
impl_bytecode = '608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806319ff1d2114610030575b600080fd5b61003861004e565b6040516100459190610124565b60405180910390f35b60606040518060400160405280600b81526020017f68656c6c6f20776f726c64000000000000000000000000000000000000000000815250905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156100c55780820151818401526020810190506100aa565b838111156100d4576000848401525b50505050565b6000601f19601f8301169050919050565b60006100f68261008b565b6101008185610096565b93506101108185602086016100a7565b610119816100da565b840191505092915050565b6000602082019050818103600083015261013e81846100eb565b90509291505056fea2646970667358221220dac56691e4e7399d1cd082465dc09cff423a7ed5f52c84162e8ff8859bc6764e64736f6c634300080b0033'

ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))
web3.eth.defaultAccount = web3.eth.accounts[0]

class DISTLibrary:

    def __init__(self):
        # 部署实现合约
        impl_contract = web3.eth.contract(abi=impl_abi, bytecode=impl_bytecode)
        tx_hash = impl_contract.constructor().transact()
        impl_addr = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # 部署代理合约
        proxy_contract = web3.eth.contract(abi=proxy_abi, bytecode=proxy_bytecode)
        tx_hash = proxy_contract.constructor(impl_addr).transact()
        proxy_addr = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # 赋值
        self.impl = web3.eth.contract(address=impl_addr, abi=impl_abi)
        self.proxy = web3.eth.contract(address=proxy_addr, abi=proxy_abi)
        self.curr_analysis_code = Addition(impl_bytecode)

    def append(self, bytecode: str):
        code_analysis = Addition(bytecode)
        combined = combine_bytecode(self.curr_analysis_code, code_analysis)
        print(combined.bytecode1)
        # 将合并后的实现合约部署
        new_impl = web3.eth.contract(abi=impl_abi, bytecode=combined.bytecode1)
        tx_hash = new_impl.constructor().transact()
        new_impl_addr = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # 更改代理合约中的实现合约地址
        self.proxy.functions.updateImpl(new_impl_addr).transact()
        # 更新变量
        self.impl = web3.eth.contract(address=new_impl_addr, abi=impl_abi)
        self.curr_analysis_code = combined

    # TODO:调用函数
    def call_fun(self):
        pass


add1 = '6080604052348015600f57600080fd5b50609c8061001e6000396000f300608060405260043610603e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a836572881146043575b600080fd5b348015604e57600080fd5b506058600435606a565b60408051918252519081900360200190f35b600101905600a165627a7a723058201b5930ac885210ff114b55848f959850c81886c515ec221eb475490f85e319a50029'
lib = DISTLibrary()
print("代理合约地址: {}".format(lib.proxy.functions.implLibrary().call()))  # 验证是否正常部署
print("调用hello(): {}".format(lib.proxy.functions.exec("0x19ff1d21").call()))   # 验证是否正确部署代理与实现合约，以及显示是否正常
# 验证增添函数是否正常
lib.append(add1)
# print("调用新增函数add1(2): {}".format(lib.proxy.functions.exec("0xebc78ceb0000000000000000000000000000000000000000000000000000000000000002").call()))
