import json
from web3 import Web3
from conbinPatch import Addition, addition_to_source, combine_bytecode

ganache_url = "http://127.0.0.1:7545"
web3 = Web3(Web3.HTTPProvider(ganache_url))
web3.eth.defaultAccount = web3.eth.accounts[0]

def deploy(abi, bytecode):
    Contract = web3.eth.contract(abi=abi, bytecode=bytecode)
    tx_hash = Contract.constructor().transact()
    address = web3.eth.get_transaction_receipt(tx_hash)['contractAddress']
    return address

def combine_by_index(ls: list) -> tuple:
    global abi_bytecode
    abi = abi_bytecode[ls[0]][0]  # 取出第一个 abi
    source_temp = Addition(abi_bytecode[ls[0]][1])
    source = addition_to_source(source_temp)
    for i in ls[1:]:
        abi += abi_bytecode[i][0]
        addition = Addition(abi_bytecode[i][1])
        source = combine_bytecode(source, addition)
    return abi, source.bytecode


abi_bytecode = [
    # add1
    [json.loads('[{"inputs":[{"internalType":"uint256","name":"a","type":"uint256"}],"name":"add1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}]'),
     '6080604052348015600f57600080fd5b50609c8061001e6000396000f300608060405260043610603e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a836572881146043575b600080fd5b348015604e57600080fd5b506058600435606a565b60408051918252519081900360200190f35b600101905600a165627a7a723058201b5930ac885210ff114b55848f959850c81886c515ec221eb475490f85e319a50029'],
    # double
    [json.loads('[{"constant":true,"inputs":[{"name":"num","type":"uint256"}],"name":"double","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]'),
     '6080604052348015600f57600080fd5b50609c8061001e6000396000f300608060405260043610603e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663eee9720681146043575b600080fd5b348015604e57600080fd5b506058600435606a565b60408051918252519081900360200190f35b600202905600a165627a7a72305820f3a6ecd64c261907682d5ce13a40341199a16032194121592a8017e6692158de0029'],
    # fibonacci 0.4.25 0.5.0 0.6.0 0.7.0 开优化200
    [json.loads('[{"constant":false,"inputs":[{"name":"start","type":"uint256"},{"name":"n","type":"uint256"}],"name":"fibonacci","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]'),
     '608060405234801561001057600080fd5b5060d28061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063421ec76514602d575b600080fd5b604d60048036036040811015604157600080fd5b5080359060200135605f565b60408051918252519081900360200190f35b600081606b5750816096565b8160011415607c5750600182016096565b60878360028403605f565b60928460018503605f565b0190505b9291505056fea2646970667358221220483dea6b833aff37591a132d1f07d64351a7443c3e5352291700acad7bcf926a64736f6c63430007000033'],
    # sqrt
    [json.loads('[{"inputs":[{"internalType":"uint256","name":"y","type":"uint256"}],"name":"sqrt","outputs":[{"internalType":"uint256","name":"z","type":"uint256"}],"stateMutability":"pure","type":"function"}]'),
     '608060405234801561001057600080fd5b5060e98061001f6000396000f300608060405260043610603e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663677342ce81146043575b600080fd5b348015604e57600080fd5b506058600435606a565b60408051918252519081900360200190f35b600080600383111560ad5750819050600160028204015b8181101560a9578091506002818285811515609857fe5b040181151560a257fe5b0490506081565b60b7565b821560b757600191505b509190505600a165627a7a723058202e71fd1835416cee731e478d74eaca6168d776ab062d936c747d0f7a6b07c7a40029'],
    # input_test
    [json.loads('[{"constant":true,"inputs":[{"name":"","type":"bytes"},{"name":"","type":"bool"},{"name":"","type":"uint256[]"}],"name":"sam","outputs":[],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"x","type":"uint32"},{"name":"y","type":"bool"}],"name":"baz","outputs":[{"name":"r","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}]'),
     '608060405234801561001057600080fd5b506101ad806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a5643bf214610051578063cdcd77c014610109575b600080fd5b34801561005d57600080fd5b50610107600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080351515906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610160565b005b34801561011557600080fd5b50610146600480360381019080803563ffffffff169060200190929190803515159060200190929190505050610165565b604051808215151515815260200191505060405180910390f35b505050565b600060208363ffffffff1611806101795750815b9050929150505600a165627a7a7230582091ddfd8a2a7cdd2802294d600fc6b92b5ef4c4255734acc0b68774240472287a0029'],
    # add_list
    [json.loads('[{"inputs":[{"internalType":"uint256[]","name":"ls","type":"uint256[]"}],"name":"add_list","outputs":[{"internalType":"uint256","name":"z","type":"uint256"}],"stateMutability":"pure","type":"function"}]'),
     '608060405234801561001057600080fd5b506103fe806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e343dda14610030575b600080fd5b61004a60048036038101906100459190610161565b610060565b60405161005791906101b9565b60405180910390f35b6000805b82518110156100a8578281815181106100805761007f61032e565b5b6020026020010151826100939190610225565b915080806100a0906102b6565b915050610064565b50919050565b60006100c16100bc846101f9565b6101d4565b905080838252602082019050828560208602820111156100e4576100e3610391565b5b60005b8581101561011457816100fa888261014c565b8452602084019350602083019250506001810190506100e7565b5050509392505050565b600082601f8301126101335761013261038c565b5b81356101438482602086016100ae565b91505092915050565b60008135905061015b816103b1565b92915050565b6000602082840312156101775761017661039b565b5b600082013567ffffffffffffffff81111561019557610194610396565b5b6101a18482850161011e565b91505092915050565b6101b38161027b565b82525050565b60006020820190506101ce60008301846101aa565b92915050565b60006101de6101ef565b90506101ea8282610285565b919050565b6000604051905090565b600067ffffffffffffffff8211156102145761021361035d565b5b602082029050602081019050919050565b60006102308261027b565b915061023b8361027b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156102705761026f6102ff565b5b828201905092915050565b6000819050919050565b61028e826103a0565b810181811067ffffffffffffffff821117156102ad576102ac61035d565b5b80604052505050565b60006102c18261027b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156102f4576102f36102ff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6103ba8161027b565b81146103c557600080fd5b5056fea26469706673582212207ed30de6d52ae10416426cf07effad29d1ef73eba973c3c71b3b0531b0947bd464736f6c63430008070033']
]

res = combine_by_index([4])

contractAddress = deploy(*res)

contract = web3.eth.contract(address=contractAddress, abi=res[0])  # 创建一个合约
# print(contract.functions.add1(2).call())  # 当无需 gas 时直接使用 call 即可读取
# print(contract.functions.double(2).call())
# print(contract.functions.fibonacci(0, 7).call())
# print(contract.functions.sqrt(5).call())
# print(contract.functions.baz(77, False).call())
# print(contract.functions.sam(b"dava", False, [1, 2, 3]).call())
# print(contract.encodeABI(fn_name="add_list", args=[[1, 2, 3]]))